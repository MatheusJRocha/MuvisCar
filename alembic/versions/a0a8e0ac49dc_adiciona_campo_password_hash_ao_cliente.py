"""Adiciona campo password_hash ao cliente

Revision ID: a0a8e0ac49dc
Revises: 08d1731f8707
Create Date: 2025-08-06 12:44:07.683142 # (Sua data original)

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# Importe CryptContext para gerar um hash de senha padrão, se necessário
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# revision identifiers, used by Alembic.
revision: str = 'a0a8e0ac49dc'
down_revision: Union[str, None] = '08d1731f8707'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # CUIDADO: A operação de drop_table('user') foi comentada.
    # Se você realmente precisa dropar esta tabela, descomente a linha abaixo.
    # op.drop_table('user')

    # Passo 1: Adicionar a coluna password_hash como nullable=True (permitindo valores nulos temporariamente)
    op.add_column('clientes', sa.Column('password_hash', sa.String(length=255), nullable=True))

    # Passo 2: Preencher a nova coluna com um valor padrão para as linhas existentes
    # É CRUCIAL definir um valor padrão para que a próxima etapa (NOT NULL) não falhe.
    # Geramos um hash para uma string vazia como valor padrão.
    # Você pode usar 'print(pwd_context.hash("sua_senha_padrao_aqui"))' para gerar um hash diferente.
    default_hash_for_existing_users = pwd_context.hash("senha_vazia_ou_padrao") # Gere um hash real
    op.execute(f"UPDATE clientes SET password_hash = '{default_hash_for_existing_users}' WHERE password_hash IS NULL")

    # Passo 3: Alterar a coluna password_hash para nullable=False (NOT NULL)
    op.alter_column('clientes', 'password_hash', existing_type=sa.String(length=255), nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # No downgrade, removemos a coluna
    op.drop_column('clientes', 'password_hash')

    # CUIDADO: A operação de create_table('user') foi comentada.
    # Se você realmente precisa recriar esta tabela no downgrade, descomente as linhas abaixo.
    # op.create_table('user',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    # sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
    # sa.UniqueConstraint('email', name=op.f('user_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    # sa.UniqueConstraint('username', name=op.f('user_username_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    # )
    # ### end Alembic commands ###
