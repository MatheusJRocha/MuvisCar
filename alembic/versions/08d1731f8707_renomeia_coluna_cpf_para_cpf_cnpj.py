"""Renomeia coluna cpf para cpf_cnpj

Revision ID: 08d1731f8707
Revises: 05348787639d
Create Date: 2025-08-06 11:55:19.190775

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '08d1731f8707'
down_revision: Union[str, None] = '05348787639d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Primeiro, vamos lidar com a tabela 'user' se ela realmente precisa ser dropada
    # Se 'user' não existe ou você não quer que ela seja dropada aqui, remova esta linha.
    op.drop_table('user') # CUIDADO: Isso vai dropar a tabela 'user' se ela existir.

    # 1. Adicionar a nova coluna 'cpf_cnpj' como nullable=True (permitindo nulos temporariamente)
    op.add_column('clientes', sa.Column('cpf_cnpj', sa.String(length=14), nullable=True))

    # 2. Copiar os dados existentes da coluna 'cpf' para 'cpf_cnpj'
    # Isso é crucial para preencher os valores para as linhas já existentes
    op.execute("UPDATE clientes SET cpf_cnpj = cpf")

    # 3. Lidar com os nulos restantes (se houver linhas onde 'cpf' era nulo)
    # E 'cpf_cnpj' não pode ser nulo.
    # Escolha um valor padrão que faça sentido para o seu negócio,
    # por exemplo, uma string vazia, ou um CPF/CNPJ de placeholder.
    # Ex: '00000000000' para CPF, '00000000000000' para CNPJ.
    # Vamos usar um valor genérico que indique "não fornecido"
    op.execute("UPDATE clientes SET cpf_cnpj = 'NAO_INFORMADO' WHERE cpf_cnpj IS NULL")


    # 4. Alterar a coluna 'cpf_cnpj' para nullable=False (NOT NULL)
    op.alter_column('clientes', 'cpf_cnpj', existing_type=sa.String(length=14), nullable=False)

    # 5. Remover o índice antigo da coluna 'cpf'
    op.drop_index(op.f('ix_clientes_cpf'), table_name='clientes')

    # 6. Criar o novo índice para a coluna 'cpf_cnpj'
    op.create_index(op.f('ix_clientes_cpf_cnpj'), 'clientes', ['cpf_cnpj'], unique=True)

    # 7. Remover a coluna 'cpf' antiga
    op.drop_column('clientes', 'cpf')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Reverte as operações do upgrade na ordem inversa

    # 1. Adicionar a coluna 'cpf' de volta (nullable=True temporariamente)
    op.add_column('clientes', sa.Column('cpf', sa.VARCHAR(length=11), autoincrement=False, nullable=True))

    # 2. Copiar os dados de 'cpf_cnpj' de volta para 'cpf'
    op.execute("UPDATE clientes SET cpf = cpf_cnpj")

    # 3. Alterar a coluna 'cpf' para nullable=False (se era assim originalmente)
    op.alter_column('clientes', 'cpf', existing_type=sa.VARCHAR(length=11), nullable=False)

    # 4. Remover o índice da coluna 'cpf_cnpj'
    op.drop_index(op.f('ix_clientes_cpf_cnpj'), table_name='clientes')

    # 5. Criar o índice antigo para a coluna 'cpf'
    op.create_index(op.f('ix_clientes_cpf'), 'clientes', ['cpf'], unique=True)

    # 6. Remover a coluna 'cpf_cnpj'
    op.drop_column('clientes', 'cpf_cnpj')

    # 7. Recriar a tabela 'user' se ela foi dropada no upgrade
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey')),
    sa.UniqueConstraint('email', name=op.f('user_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name=op.f('user_username_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
